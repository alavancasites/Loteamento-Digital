<?php

/**
* This is the model base class for the table "imovel_reserva".
* DO NOT MODIFY THIS FILE! It is automatically generated by giix.
* If any changes are necessary, you must set or override the required
* property or method in class "ImovelReserva".
*
* Columns in table "imovel_reserva" available as properties of the model,
* followed by relations of table "imovel_reserva" available as properties of the model.
*
* @property integer $idimovel_reserva
* @property string $data
* @property string $nome
* @property string $email
* @property string $cpf_cnpj
* @property integer $idcorretor
* @property integer $idimovel
* @property string $status
* @property string $ativo
* @property string $telefone
* @property string $observacoes
*
* @property Imovel[] $imovels
* @property Corretor $corretor
* @property Imovel $imovel
*/
abstract class BaseImovelReserva extends GxActiveRecord {



	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'imovel_reserva';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Reserva|Reservas', $n);
	}

	public static function representingColumn() {
		return array('nome');
	}

	public function rules() {
		return array(
			array('nome, email, cpf_cnpj, telefone', 'required'),
			array('email', 'email'),
			array('cpf_cnpj', 'validaUnica'),
			array('cpf_cnpj', 'ext.cpf-cnpj-validator.CPFCNPJValidator'),

			array('idcorretor, idcliente, idimovel', 'numerical', 'integerOnly'=>true),
			array('nome, email, cpf_cnpj, telefone', 'length', 'max'=>100),
			array('status', 'length', 'max'=>150),
			array('ativo', 'length', 'max'=>1),
			array('data, observacoes', 'safe'),
			array('data, nome, email, cpf_cnpj, idcorretor, idcliente, idimovel, status, ativo, telefone, observacoes', 'default', 'setOnEmpty' => true, 'value' => null),
			array('idimovel_reserva, data, nome, email, cpf_cnpj, idcorretor, idcliente, idimovel, status, ativo, telefone, observacoes', 'safe', 'on'=>'search'),
		);
	}

	public function validaUnica() {
		// $criteria = new CDbCriteria;
		// $criteria->addCondition("cpf_cnpj = '".$this->cpf_cnpj."'");
		// $criteria->addCondition("idimovel_reserva <> '".$this->idimovel_reserva."'");
		// $criteria->addCondition("status <> 'cancelada' AND status <> 'expirado'");
		// if(ImovelReserva::model()->find($criteria)){
		// 	$this->addError('cpf_cnpj', 'O CPF/CNPJ informado já possui um lote reservado.');
		// 	return false;
		// }

		$criteria = new CDbCriteria;
		$criteria->addCondition("cpf_cnpj = '".$this->cpf_cnpj."'");
		if(Corretor::model()->find($criteria)){
			$this->addError('cpf_cnpj', 'O CPF/CNPJ não pode fazer reservas.');
			return false;
		}
		return true;
	}

	public function relations() {
		return array(
			//'imovels' => array(self::HAS_MANY, 'Imovel', 'idimovel_reserva'),
			'corretor' => array(self::BELONGS_TO, 'Corretor', 'idcorretor'),
			'imovel' => array(self::BELONGS_TO, 'Imovel', 'idimovel'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'idimovel_reserva' => Yii::t('app', 'Idimovel Reserva'),
			'data' => Yii::t('app', 'Data'),
			'nome' => Yii::t('app', 'Nome'),
			'email' => Yii::t('app', 'E-mail'),
			'cpf_cnpj' => Yii::t('app', 'CPF/CNPJ'),
			'idcorretor' => null,
			'idimovel' => null,
			'status' => Yii::t('app', 'Status'),
			'ativo' => Yii::t('app', 'Ativo'),
			'telefone' => Yii::t('app', 'Telefone'),
			'observacoes' => Yii::t('app', 'Observações'),
			'imovels' => null,
			'corretor' => null,
			'idcliente' => Yii::t('app', 'Cliente'),
			'imovel' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('idimovel_reserva', $this->idimovel_reserva);
		$criteria->compare('data', $this->data, true);
		$criteria->compare('nome', $this->nome, true);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('cpf_cnpj', $this->cpf_cnpj, true);
		$criteria->compare('idcorretor', $this->idcorretor);
		$criteria->compare('idimovel', $this->idimovel);
		$criteria->compare('status', $this->status, true);
		$criteria->compare('ativo', $this->ativo, true);
		$criteria->compare('telefone', $this->telefone, true);
		$criteria->compare('observacoes', $this->observacoes, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}
